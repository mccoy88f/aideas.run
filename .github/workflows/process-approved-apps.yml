name: Process Approved Apps

on:
  issues:
    types: [closed]

permissions:
  contents: write
  issues: write

jobs:
  process-approved-app:
    # Solo se l'issue è chiusa E ha la label 'approved' E ha il tag [SUBMISSION]
    if: |
      github.event.action == 'closed' &&
      contains(github.event.issue.labels.*.name, 'approved') &&
      contains(github.event.issue.title, '[SUBMISSION]')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Extract app info from issue
        id: extract
        run: |
          # Create a safe temporary file to avoid shell interpretation issues
          echo "${{ github.event.issue.body }}" > /tmp/issue_body.txt
          
          echo "Processing issue: ${{ github.event.issue.title }}"
          echo "Issue action: ${{ github.event.action }}"
          echo "Issue labels: ${{ github.event.issue.labels.*.name }}"
          
          # Extract ZIP URL from GitHub Gist (prioritize this)
          ZIP_URL=$(grep -o 'https://gist\.githubusercontent\.com/[^[:space:]]*' /tmp/issue_body.txt | head -1)
          
          # If no Gist URL found, try GitHub raw URLs
          if [ -z "$ZIP_URL" ]; then
            ZIP_URL=$(grep -o 'https://raw\.githubusercontent\.com/[^[:space:]]*' /tmp/issue_body.txt | head -1)
          fi
          
          # If still no URL found, try .zip URLs
          if [ -z "$ZIP_URL" ]; then
            ZIP_URL=$(grep -o 'https://[^[:space:]]*\.zip' /tmp/issue_body.txt | head -1)
          fi
          
          # If still no URL found, try file.io (legacy)
          if [ -z "$ZIP_URL" ]; then
            ZIP_URL=$(grep -o 'https://file\.io/[a-zA-Z0-9]*' /tmp/issue_body.txt | head -1)
          fi
          
          # Extract app name from issue title
          APP_NAME=$(echo "${{ github.event.issue.title }}" | sed 's/\[SUBMISSION\] //' | sed 's/\[SUBMISSION\]//')
          
          # Extract additional info using safer approach
          DESCRIPTION=$(grep -A1 "**Description:**" /tmp/issue_body.txt | tail -1 | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//' || echo "App submitted via AIdeas Store")
          AUTHOR=$(grep -A1 "**Author:**" /tmp/issue_body.txt | tail -1 | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//' || echo "Unknown")
          CATEGORY=$(grep -A1 "**Category:**" /tmp/issue_body.txt | tail -1 | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//' || echo "utility")
          TAGS=$(grep -A1 "**Tags:**" /tmp/issue_body.txt | tail -1 | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//' || echo "")
          
          # Set defaults if empty
          [ -z "$DESCRIPTION" ] && DESCRIPTION="App submitted via AIdeas Store"
          [ -z "$AUTHOR" ] && AUTHOR="Unknown"
          [ -z "$CATEGORY" ] && CATEGORY="utility"
          [ -z "$TAGS" ] && TAGS=""
          
          # Generate app ID: nome-app.autore
          APP_ID_BASE=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | sed 's/[^a-z0-9-]//g')
          AUTHOR_SANITIZED=$(echo "$AUTHOR" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | sed 's/[^a-z0-9-]//g')
          APP_ID="${APP_ID_BASE}.${AUTHOR_SANITIZED}"
          
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "app_id=$APP_ID" >> $GITHUB_OUTPUT
          echo "zip_url=$ZIP_URL" >> $GITHUB_OUTPUT
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "author=$AUTHOR" >> $GITHUB_OUTPUT
          echo "category=$CATEGORY" >> $GITHUB_OUTPUT
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          
          echo "Extracted info:"
          echo "App Name: $APP_NAME"
          echo "App ID: $APP_ID"
          echo "ZIP URL: $ZIP_URL"
          echo "Description: $DESCRIPTION"
          echo "Author: $AUTHOR"
          echo "Category: $CATEGORY"
          echo "Tags: $TAGS"
          
          # Validate that we have the required information
          if [ -z "$ZIP_URL" ]; then
            echo "Error: No ZIP URL found in issue body"
            echo "Issue body preview:"
            head -10 /tmp/issue_body.txt
            exit 1
          fi
          
          if [ -z "$APP_NAME" ]; then
            echo "Error: No app name found in issue title"
            exit 1
          fi
          
          # Cleanup
          rm -f /tmp/issue_body.txt
      
      - name: Download and extract ZIP
        run: |
          # Download ZIP from Gist or other source
          echo "Downloading ZIP from: ${{ steps.extract.outputs.zip_url }}"
          curl -L "${{ steps.extract.outputs.zip_url }}" -o temp.zip
          
          # Check if download was successful
          if [ ! -f temp.zip ] || [ ! -s temp.zip ]; then
            echo "Error: Failed to download ZIP file"
            exit 1
          fi
          
          # Check if file is base64 encoded (common for Gists)
          if head -c 10 temp.zip | grep -q '^[A-Za-z0-9+/]*$'; then
            echo "Detected base64 encoded ZIP, decoding..."
            base64 -d < temp.zip > temp-real.zip
            mv temp-real.zip temp.zip
          else
            echo "Binary ZIP file detected"
          fi
          
          # Create app directory
          mkdir -p "apps/${{ steps.extract.outputs.app_id }}"
          
          # Extract ZIP to app directory
          unzip -j temp.zip -d "apps/${{ steps.extract.outputs.app_id }}/"
          
          # Cleanup
          rm temp.zip
          
          # Remove macOS hidden files
          find "apps/${{ steps.extract.outputs.app_id }}/" -name "._*" -delete
          find "apps/${{ steps.extract.outputs.app_id }}/" -name ".DS_Store" -delete
          
          echo "Files extracted:"
          ls -la "apps/${{ steps.extract.outputs.app_id }}/"
      
      - name: Validate app structure
        run: |
          APP_DIR="apps/${{ steps.extract.outputs.app_id }}"
          
          # Check if required files exist
          if [ ! -f "$APP_DIR/index.html" ]; then
            echo "Error: index.html is required"
            echo "Available files:"
            ls -la "$APP_DIR/"
            exit 1
          fi
          
          # Create aideas.json if it doesn't exist
          if [ ! -f "$APP_DIR/aideas.json" ]; then
            echo "Creating aideas.json manifest..."
            echo '{"name":"${{ steps.extract.outputs.app_name }}","description":"${{ steps.extract.outputs.description }}","author":"${{ steps.extract.outputs.author }}","version":"1.0.0","category":"${{ steps.extract.outputs.category }}","tags":["${{ steps.extract.outputs.tags }}"],"icon":"📱","appFormat":"unzipped"}' > "$APP_DIR/aideas.json"
          fi
          
          # Validate aideas.json
          if [ -f "$APP_DIR/aideas.json" ]; then
            echo "Validating aideas.json..."
            node -e "
              try {
                const manifest = JSON.parse(require('fs').readFileSync('$APP_DIR/aideas.json', 'utf8'));
                console.log('Manifest validated:', manifest.name);
              } catch (e) {
                console.error('Invalid aideas.json:', e.message);
                process.exit(1);
              }
            "
          fi
          
          echo "App structure validated successfully"
      
      - name: Update catalog
        run: |
          # Create catalog.json if it doesn't exist
          if [ ! -f "catalog.json" ]; then
            echo "Creating catalog.json..."
            echo '{"apps":[],"lastUpdated":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > "catalog.json"
          fi
          
          # Update catalog with new app
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            const catalogPath = 'catalog.json';
            const appId = '${{ steps.extract.outputs.app_id }}';
            const appName = '${{ steps.extract.outputs.app_name }}';
            const description = '${{ steps.extract.outputs.description }}';
            const author = '${{ steps.extract.outputs.author }}';
            const category = '${{ steps.extract.outputs.category }}';
            const tags = '${{ steps.extract.outputs.tags }}'.split(',').filter(tag => tag.trim());
            
            let catalog = { apps: [], lastUpdated: new Date().toISOString() };
            
            if (fs.existsSync(catalogPath)) {
              catalog = JSON.parse(fs.readFileSync(catalogPath, 'utf8'));
            }
            
            // Check if app already exists
            const existingAppIndex = catalog.apps.findIndex(app => app.id === appId);
            
            const appInfo = {
              id: appId,
              name: appName,
              description: description,
              author: author,
              version: '1.0.0',
              category: category,
              tags: tags,
              icon: '📱',
              githubUrl: 'https://github.com/mccoy88f/aideas.store/tree/main/apps/' + appId,
              downloadUrl: 'https://github.com/mccoy88f/aideas.store/archive/refs/heads/main.zip',
              installDate: new Date().toISOString(),
              lastUsed: null,
              favorite: false,
              type: 'store',
              storeId: appId,
              lastModified: new Date().toISOString()
            };
            
            if (existingAppIndex >= 0) {
              catalog.apps[existingAppIndex] = appInfo;
            } else {
              catalog.apps.push(appInfo);
            }
            
            catalog.lastUpdated = new Date().toISOString();
            
            fs.writeFileSync(catalogPath, JSON.stringify(catalog, null, 2));
            console.log('Catalog updated with app:', appId);
          "
      
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Add all files except hidden ones
          git add apps/${{ steps.extract.outputs.app_id }}/
          git add catalog.json
          
          # Commit with detailed message
          git commit -m "feat: add approved app '${{ steps.extract.outputs.app_name }}' (ID: ${{ steps.extract.outputs.app_id }})
          
          - App: ${{ steps.extract.outputs.app_name }}
          - Author: ${{ steps.extract.outputs.author }}
          - Category: ${{ steps.extract.outputs.category }}
          - Tags: ${{ steps.extract.outputs.tags }}
          - Auto-approved via workflow"
          
          # Push to main branch
          git push origin main
      
      - name: Comment on issue
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ✅ **App approvata e pubblicata automaticamente!**
            
            **App:** ${{ steps.extract.outputs.app_name }}
            **ID:** ${{ steps.extract.outputs.app_id }}
            **Autore:** ${{ steps.extract.outputs.author }}
            **Categoria:** ${{ steps.extract.outputs.category }}
            
            L'app è stata aggiunta al repository AIdeas Store e sarà disponibile a breve.
            
            📍 **Percorso:** `apps/${{ steps.extract.outputs.app_id }}/`
            📁 **Formato:** `nome-app.autore`
            
            Grazie per la submission!
      
      - name: Notify success
        run: |
          echo "✅ App '${{ steps.extract.outputs.app_name }}' (ID: ${{ steps.extract.outputs.app_id }}) has been successfully added to the store!"
          echo "📁 App installed in: apps/${{ steps.extract.outputs.app_id }}/"
          echo "📋 Format: nome-app.autore"
          echo "Repository updated with new app files and catalog."
          echo "Workflow triggered by closing issue with 'approved' label and '[SUBMISSION]' tag." 