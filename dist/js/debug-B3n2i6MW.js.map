{"version":3,"mappings":";yNAQO,MAAMA,EAAQ,CACnB,QAAgC,aAAa,QAAQ,cAAc,IAAM,OACzE,QAAS,aAAa,QAAQ,wBAAwB,IAAM,MAmC9D,EAG2BA,EAAM,UAC/B,OAAO,WAAa,CAElB,MAAM,gBAAiB,CACrB,MAAMC,EAAiB,YAAM,OAAO,oBAA+B,OAAAC,KAAA,6BAAE,KAAKC,GAAKA,EAAE,OAAO,EAClFC,EAAQ,MAAMH,EAAe,WAC7BI,EAAO,MAAMJ,EAAe,aAC5BK,EAAW,MAAML,EAAe,iBAEtC,QAAQ,MAAM,8BAA8B,EAC5C,QAAQ,IAAI,SAAUG,CAAK,EAC3B,QAAQ,MAAMC,CAAI,EAClB,QAAQ,IAAI,YAAaC,CAAQ,EACjC,QAAQ,UAAS,EAInB,gBAAiB,CACf,MAAO,CACL,OAAQ,YAAY,OACpB,WAAY,YAAY,WACxB,OAAQ,YAAY,OACtB,EAIF,WAAY,CACV,OAAO,OAAO,eAAiB,EAAC,EAIlC,cAAe,CACbC,EAAiB,CACf,MAAO,eACP,QAAS,gFACT,KAAM,SACN,YAAa,UACb,WAAY,UACZ,KAAM,SACP,EAAE,KAAKC,GAAa,CACfA,IACF,aAAa,QACb,eAAe,QACf,UAAU,eAAe,WAAW,EACpCC,EAAU,yBAA0B,SAAS,EAC7C,WAAW,IAAM,OAAO,SAAS,SAAU,GAAI,EACjD,CACD,GAIH,eAAgB,CACd,aAAa,QAAQ,yBAA0B,MAAM,EACrDT,EAAM,QAAU,GAChB,QAAQ,IAAI,yBAAyB,GAIvC,gBAAiB,CACf,aAAa,WAAW,wBAAwB,EAChDA,EAAM,QAAU,GAChB,QAAQ,IAAI,0BAA0B,EACxC,GAKG,MAAMU,CAAa,CAGxB,OAAO,MAAO,CACZ,OAAO,cAAgB,KAAK,OAE5B,OAAO,iBAAiB,QAAUC,GAAU,CAC1C,KAAK,WAAW,CACd,KAAM,UACN,QAASA,EAAM,QACf,OAAQA,EAAM,SACd,OAAQA,EAAM,OACd,MAAOA,EAAM,MACb,MAAOA,EAAM,OAAO,MACpB,UAAW,IAAI,OAAO,aAAY,CACnC,EACF,EAED,OAAO,iBAAiB,qBAAuBA,GAAU,CACvD,KAAK,WAAW,CACd,KAAM,UACN,QAASA,EAAM,QAAQ,SAAW,8BAClC,MAAOA,EAAM,QAAQ,MACrB,UAAW,IAAI,OAAO,aAAY,CACnC,EACF,EAGH,OAAO,WAAWC,EAAO,CACvB,KAAK,OAAO,KAAKA,CAAK,EAClBZ,EAAM,SACR,QAAQ,MAAM,yBAA0BY,CAAK,EAI3C,KAAK,OAAO,OAAS,KACvB,KAAK,OAAO,OACd,CAGF,OAAO,WAAY,CACjB,OAAO,KAAK,OAGd,OAAO,aAAc,CACnB,YAAK,OAAS,GACP,GAEX,CA/CEC,EADWH,EACJ,SAAS,IA4GlBA,EAAa","names":["DEBUG","StorageService","n","m","stats","apps","settings","showConfirmPopup","confirmed","showToast","ErrorTracker","event","error","__publicField"],"ignoreList":[],"sources":["../../src/utils/debug.js"],"sourcesContent":["/**\n * AIdeas - Debug Utilities\n * Utility per debugging e sviluppo\n */\n\nimport { DEBUG_CONFIG } from './constants.js';\nimport { showToast, showConfirmPopup } from './helpers.js';\n\nexport const DEBUG = {\n  enabled: import.meta.env.DEV || localStorage.getItem('aideas_debug') === 'true',\n  verbose: localStorage.getItem('aideas_verbose_logging') === 'true',\n  \n  log(...args) {\n    if (this.enabled) {\n      console.log('[AIdeas Debug]', ...args);\n    }\n  },\n  \n  warn(...args) {\n    if (this.enabled) {\n      console.warn('[AIdeas Debug]', ...args);\n    }\n  },\n  \n  error(...args) {\n    console.error('[AIdeas Debug]', ...args);\n  },\n  \n  table(data) {\n    if (this.enabled) {\n      console.table(data);\n    }\n  },\n  \n  group(label) {\n    if (this.enabled) {\n      console.group(label);\n    }\n  },\n  \n  groupEnd() {\n    if (this.enabled) {\n      console.groupEnd();\n    }\n  }\n};\n\n// Development console tools\nif (import.meta.env.DEV || DEBUG.enabled) {\n  window.AIdeas_DEV = {\n    // Storage inspection\n    async inspectStorage() {\n      const StorageService = await import('../services/StorageService.js').then(m => m.default);\n      const stats = await StorageService.getStats();\n      const apps = await StorageService.getAllApps();\n      const settings = await StorageService.getAllSettings();\n      \n      console.group('🔍 AIdeas Storage Inspection');\n      console.log('Stats:', stats);\n      console.table(apps);\n      console.log('Settings:', settings);\n      console.groupEnd();\n    },\n    \n    // Performance metrics\n    getPerformance() {\n      return {\n        timing: performance.timing,\n        navigation: performance.navigation,\n        memory: performance.memory\n      };\n    },\n    \n    // Error log\n    getErrors() {\n      return window.AIdeas_ERRORS || [];\n    },\n    \n    // Clear all data\n    clearAllData() {\n      showConfirmPopup({\n        title: 'Pulisci Dati',\n        message: 'Eliminare tutti i dati di AIdeas? Questa operazione non può essere annullata!',\n        icon: 'danger',\n        confirmText: 'Elimina',\n        cancelText: 'Annulla',\n        type: 'danger'\n      }).then(confirmed => {\n        if (confirmed) {\n          localStorage.clear();\n          sessionStorage.clear();\n          indexedDB.deleteDatabase('aideas-db');\n          showToast('Tutti i dati eliminati', 'success');\n          setTimeout(() => window.location.reload(), 1000);\n        }\n      });\n    },\n    \n    // Enable verbose logging\n    enableVerbose() {\n      localStorage.setItem('aideas_verbose_logging', 'true');\n      DEBUG.verbose = true;\n      console.log('Verbose logging enabled');\n    },\n    \n    // Disable verbose logging\n    disableVerbose() {\n      localStorage.removeItem('aideas_verbose_logging');\n      DEBUG.verbose = false;\n      console.log('Verbose logging disabled');\n    }\n  };\n}\n\n// Tracking degli errori globali\nexport class ErrorTracker {\n  static errors = [];\n  \n  static init() {\n    window.AIdeas_ERRORS = this.errors;\n    \n    window.addEventListener('error', (event) => {\n      this.trackError({\n        type: 'runtime',\n        message: event.message,\n        source: event.filename,\n        lineno: event.lineno,\n        colno: event.colno,\n        stack: event.error?.stack,\n        timestamp: new Date().toISOString()\n      });\n    });\n    \n    window.addEventListener('unhandledrejection', (event) => {\n      this.trackError({\n        type: 'promise',\n        message: event.reason?.message || 'Unhandled Promise Rejection',\n        stack: event.reason?.stack,\n        timestamp: new Date().toISOString()\n      });\n    });\n  }\n  \n  static trackError(error) {\n    this.errors.push(error);\n    if (DEBUG.enabled) {\n      console.error('[AIdeas Error Tracker]', error);\n    }\n    \n    // Limita il numero di errori memorizzati\n    if (this.errors.length > 100) {\n      this.errors.shift();\n    }\n  }\n  \n  static getErrors() {\n    return this.errors;\n  }\n  \n  static clearErrors() {\n    this.errors = [];\n    return true;\n  }\n}\n\n// Performance monitoring\nexport class PerformanceMonitor {\n  static metrics = {\n    marks: {},\n    measures: {},\n    counters: {}\n  };\n  \n  static mark(name) {\n    if (!DEBUG_CONFIG.ENABLE_PERFORMANCE_MARKS) return;\n    \n    const timestamp = performance.now();\n    this.metrics.marks[name] = timestamp;\n    \n    if (DEBUG.verbose) {\n      DEBUG.log(`Performance mark: ${name} at ${timestamp.toFixed(2)}ms`);\n    }\n  }\n  \n  static measure(name, startMark, endMark) {\n    if (!DEBUG_CONFIG.ENABLE_PERFORMANCE_MARKS) return;\n    \n    if (!this.metrics.marks[startMark] || !this.metrics.marks[endMark]) {\n      DEBUG.warn(`Cannot measure ${name}: marks not found`);\n      return;\n    }\n    \n    const duration = this.metrics.marks[endMark] - this.metrics.marks[startMark];\n    this.metrics.measures[name] = duration;\n    \n    if (DEBUG.verbose) {\n      DEBUG.log(`Performance measure: ${name} = ${duration.toFixed(2)}ms`);\n    }\n  }\n  \n  static count(name) {\n    if (!DEBUG_CONFIG.ENABLE_PERFORMANCE_MARKS) return;\n    \n    if (!this.metrics.counters[name]) {\n      this.metrics.counters[name] = 0;\n    }\n    \n    this.metrics.counters[name]++;\n  }\n  \n  static getMetrics() {\n    return this.metrics;\n  }\n  \n  static clearMetrics() {\n    this.metrics = {\n      marks: {},\n      measures: {},\n      counters: {}\n    };\n  }\n}\n\n// Inizializza il tracker degli errori\nErrorTracker.init();"],"file":"js/debug-B3n2i6MW.js"}